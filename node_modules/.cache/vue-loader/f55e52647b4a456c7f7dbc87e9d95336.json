{"remainingRequest":"/Users/huangweihusn/frank_code/frank-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huangweihusn/frank_code/frank-portal/src/views/Booking.vue?vue&type=style&index=0&id=bbb6eae2&lang=scss&scoped=true&","dependencies":[{"path":"/Users/huangweihusn/frank_code/frank-portal/src/views/Booking.vue","mtime":1620052844846},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huangweihusn/frank_code/frank-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo6OnYtZGVlcCAub3JnLWRlc2NyaXB0aW9uIHsKbWFyZ2luLXRvcDogNTBweDsKY29sb3I6ICM4QjAwMDA7Cn0K"},{"version":3,"sources":["Booking.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsUA;AACA;AACA;AACA","file":"Booking.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"booking\">\n        <div class=\"hero is-primary\">\n            <div class=\"hero-body\">\n                <div class=\"container\">\n                    <h1 class=\"title is-size-1\">Welcome to Booking Schedule</h1>\n                    <h2 class=\"title is-size-2\">Please pick your time.</h2>\n                </div>\n            </div>\n        </div>\n        <div class=\"container\">\n        <p class=\"org-description is-size-4\">1. booking: book time for test schedule in future schedule.</p>\n        <p class=\"org-description is-size-4\">2. logging: leave backlog for test schedule in the past schedule.</p>\n        </div>\n    \n    <div>\n        <select v-model=\"selectedView\">\n            <option v-for=\"(options, index) in viewModeOptions\" :value=\"options.value\" :key=\"index\">\n                {{ options.title }}\n            </option>\n        </select>\n        <span @click=\"onClickNavi($event)\">\n            <button type=\"button\" class=\"btn btn-default btn-sm move-today\" data-action=\"move-today\">Today</button>\n            <button type=\"button\" class=\"btn btn-default btn-sm move-day\" data-action=\"move-prev\">Prev</button>\n            <button type=\"button\" class=\"btn btn-default btn-sm move-day\" data-action=\"move-next\">Next</button>\n        </span>\n        <span class=\"render-range\">{{dateRange}}</span>\n    </div>\n    <calendar  style=\"height: 800 px\"\n               ref=\"tuiCal\"\n               :useCreationPopup=\"useCreationPopup\"\n               :useDetailPopup=\"useDetailPopup\"\n               :view=\"selectedView\"\n               :calendars=\"calendarList\"\n               :schedules=\"scheduleList\"\n               :theme=\"theme\"\n               :template=\"template\"\n               :taskView=\"true\"\n               :scheduleView=\"true\"\n               :month=\"month\"\n               :week=\"week\"\n               :timezones=\"timezones\"\n               :disableDblClick=\"disableDblClick\"\n               :isReadOnly=\"isReadOnly\"\n               @clickSchedule=\"onClickSchedule\"\n               @clickDayname=\"onClickDayname\"\n               @beforeCreateSchedule=\"onBeforeCreateSchedule\"\n               @beforeDeleteSchedule=\"onBeforeDeleteSchedule\"\n               @beforeUpdateSchedule=\"onBeforeUpdateSchedule\"\n               @afterRenderSchedule=\"onAfterRenderSchedule\"\n               @clickTimezoneCollapseBtn=\"onClickTimezoneCollapseBtn\"\n\n    />\n    </div>\n</template>\n<script>\nimport 'tui-time-picker/dist/tui-time-picker.css';\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-calendar/dist/tui-calendar.css';\nimport '../components/calendar/app.css';\nimport {Calendar} from '../components/calendar/index.js';\nimport Theme from '../components/calendar/Theme';\n\nconst today = new Date();\n\nconst getDate = (type, start, value, operator) => {\n    start = new Date(start);\n    type = type.charAt(0).toUpperCase() + type.slice(1);\n\n    if (operator === '+') {\n        start[`set${type}`](start[`get${type}`]() + value);\n    } else {\n        start[`set${type}`](start[`get${type}`]() - value);\n    }\n\n    return start;\n};\n\nexport default {\n    name: 'booking',\n    components: {\n        'calendar': Calendar\n    },\n    data() {\n        return {\n            viewModeOptions: [\n                {\n                    title: 'Monthly',\n                    value: 'month'\n                },\n                {\n                    title: 'Weekly',\n                    value: 'week'\n                },\n                {\n                    title: 'Daily',\n                    value: 'day'\n                }\n            ],\n            dateRange: '',\n            selectedView: 'month',\n            calendarList: [\n                {\n                    id: '0',\n                    name: 'Private',\n                    bgColor: '#9e5fff',\n                    borderColor: '#9e5fff'\n                },\n                {\n                    id: '1',\n                    name: 'Company',\n                    bgColor: '#00a9ff',\n                    borderColor: '#00a9ff'\n                }\n            ],\n            scheduleList: [\n                {\n                    id: '1',\n                    calendarId: '0',\n                    title: 'SVP testing',\n                    category: 'time',\n                    dueDateClass: '',\n                    start: today.toISOString(),\n                    end: getDate('hours', today, 3, '+').toISOString()\n                },\n                {\n                    id: '2',\n                    calendarId: '1',\n                    title: 'CU testing',\n                    cateogry: 'time',\n                    dueDateClass: '',\n                    start: getDate('date', today, 1, '+').toISOString(),\n                    end: getDate('date', today, 1, '+').toISOString(),\n                    isReadOnly: true\n                },\n                {\n                    id: '3',\n                    calendarId: '1',\n                    title: 'DU testing',\n                    category: 'time',\n                    dueDateClass: '',\n                    start: getDate('date', today, 2, '-').toISOString(),\n                    end: getDate('date', today, 1, '-').toISOString(),\n                    isReadOnly: true\n                },\n                {\n                    id: '4',\n                    calendarId: '1',\n                    title: 'Report',\n                    category: 'time',\n                    dueDateClass: '',\n                    start:today.toISOString(),\n                    end: getDate('hours', today, 1, '+').toISOString()\n                }\n            ],\n            timezones: [{\n                timezoneOffset: 540,\n                displayLabel: 'GMT+08:00',\n                tooltip: 'Taipei'\n            }],\n            theme: Theme,\n            template: {\n                milestone(schedule) {\n                    return `<span style=\"color:#fff;background-color: ${schedule.bgColor};\">${schedule.title}</span>`;\n                },\n                milestoneTitle() {\n                    return 'Milestone';\n                },\n                allday(schedule) {\n                    return `${schedule.title}<i class=\"fa fa-refresh\"></i>`;\n                },\n                alldayTitle() {\n                    return 'Frank';\n                },\n                popupStateFree: function() {\n                return '2021 Q2';\n                },\n                popupStateBusy: function() {\n                return '2021 Q3';\n          },\n            },\n            month: {\n                startDayOfWeek: 0\n            },\n            week: {\n                showTimezoneCollapseButton: true,\n                timezonesCollapsed: true\n            },\n            taskView: true,\n            scheduleView: true,\n            useDetailPopup: true,\n            disableDblClick: true,\n            isReadOnly: false\n        };\n    },\n    watch: {\n        selectedView(newValue) {\n            this.$refs.tuiCal.invoke('changeView', newValue, true);\n            this.setRenderRangeText();\n        }\n    },\n    methods: {\n        init() {\n            this.setRenderRangeText();\n        },\n        setRenderRangeText() {\n            const {invoke} = this.$refs.tuiCal;\n            const view = invoke('getViewName');\n            const calDate = invoke('getDate');\n            const rangeStart = invoke('getDateRangeStart');\n            const rangeEnd = invoke('getDateRangeEnd');\n            let year = calDate.getFullYear();\n            let month = calDate.getMonth() + 1;\n            let date = calDate.getDate();\n            let dateRangeText = '';\n            let endMonth, endDate, start, end;\n\n            switch (view) {\n                case 'month': \n                    dateRangeText = `${year}-${month}`;\n                    break;\n                case 'week':\n                    year = rangeStart.getFullYear();\n                    month = rangeStart.getMonth() + 1;\n                    date = rangeStart.getDate();\n                    endMonth = rangeEnd.getMonth() + 1;\n                    endDate = rangeEnd.getDate();\n\n                    start = `${year}-${month}-${date}`;\n                    end = `${endMonth}-${endDate}`;\n                    dateRangeText = `${start}~${end}`;\n                    break;\n                default:\n                    dateRangeText = `${year}-${month}-${date}`;\n            }\n            this.dateRange = dateRangeText;\n        },\n        onClickNavi(event) {\n            if (event.target.tagName === 'BUTTON') {\n                const {target} = event;\n                let action = target.dataset ? target.dataset.action : target.getAttribute('data-action');\n                action = action.replace('move-', '');\n\n                this.$refs.tuiCal.invoke(action);\n                this.setRenderRangeText();\n            }   \n        },\n        onClickSchedule(res) {\n            console.group('onClickSchedule');\n            console.log('MouseEvent : ', res.event);\n            console.log('Calendar Info : ', res.calendar);\n            console.log('Schedule Info : ', res.schedule);\n            console.groupEnd();\n        },\n        onClickDayname(res) {\n            // view : week, day\n            console.group('onClickDayname');\n            console.log(res.date);\n            console.groupEnd();\n        },\n        onBeforeCreateSchedule(e) {\n\n            console.log(\"[onBeforeCreateSchedule]\", e);\n\n            const { calendarId, title, location, start, end, isAllDay, state } = e;\n\n            this.$refs.tuiCalendar.invoke(\"createSchedules\", [\n            {\n                id: chance.guid(),\n                calendarId,\n                title,\n                isAllDay,\n                start,\n                end,\n                location,\n                state,\n                category: isAllDay ? \"allday\" : \"time\"\n            }\n            ]);\n\n            this.$refs.tuiCalendar.invoke(\"render\", true);\n        },\n        onBeforeDeleteSchedule(e) {\n            console.log(\"[onBeforeDeleteSchedule]\", e);\n\n            this.$refs.tuiCalendar.invoke(\"deleteSchedule\",\n                                            e.schedule.id,\n                                            e.schedule.calendarId\n                                            );\n        },\n        onBeforeUpdateSchedule(e) {\n            console.log(\"[onBeforeUpdateSchedule]\", e);\n\n            const { schedule, changes } = e;\n\n            this.$refs.tuiCalendar.invoke(\"updateSchedule\",\n                                            schedule.id,\n                                            schedule.calendarId,\n                                            changes);\n        },\n        onAfterRenderSchedule(res) {\n            console.group('onAfterRenderSchedule');\n            console.log('Schedule Info : ', res.schedule);\n            console.groupEnd();\n        },\n        onClickTimezonesCollapseBtn(timezonesCollapsed) {\n            // view: week, day\n            console.group('onClickTimezonesCollapsedBtn');\n            console.log('Is Collapsed Timeszone ?', timezonesCollapsed);\n            console.groupEnd();\n\n            if (timezonesCollapsed) {\n                this.theme['week.timegridLeft.width'] = '100px';\n                this.theme['week.daygridLeft.width'] = '100px';\n            } else {\n                this.theme['week.timegridLeft.width'] = '50px';\n                this.theme['week.daygridLeft.width'] = '50px';\n            }\n        }\n    },\n    mounted() {\n        this.init();\n    }\n};\n</script>\n<style lang=\"scss\" scoped> \n    ::v-deep .org-description {\n    margin-top: 50px;\n    color: #8B0000;\n    }\n</style>"]}]}